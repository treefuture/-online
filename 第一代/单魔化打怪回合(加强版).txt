#include"stdio.h"
int main()
{
    int a, b = 0, c = 0, d = 0;
    double a1 = 0, a2 = 0, a3 = 0, a4 = 0, a5 = 0;
    //叠加魔化(a后面的值为返回的伦数)
    double d1 = 0, d2 = 0, d3 = 0, d4 = 0, d5 = 0;
    //返回值(b后面得值为返回的伦数)
    double c1 = 0, c2 = 0, c3 = 0, c4 = 0, c5 = 0;
    //叠加得值(c后面得值为返回的伦数)
    int i, j, h = 1000000;
    int k, v, z, l = 0, m = 0, r = 0;
    //o为怪物总血量
    int o = 0;
    //对应怪物所剩血量
    double o1 = 0, o2 = 0, o3 = 0, o4 = 0, o5 = 0, o6 = 0;
    //完成结束语只会出现在第一次
    int k1 = 1, k2 = 1, k3 = 1, k4 = 1, k5 = 1, k6 = 1;
    //魔攻有效/无效最低伤害
    double x = 0, x1 = 0;
    double y = 0, y1 = 0;//强命伤害
    //强命值
    double qm=0;

    printf("【输入时请用逗号隔开最高与最低武商】\n");
    printf("请输入武商:");
    scanf("%d,%d",&i,&j);
    k=(i+j)/2;//武商
    printf("当前的武商值:%d\n",k);
    printf("请输入攻次:");
    scanf("%d",&z);
    printf("请输入主动技能加的攻次:");
    scanf("%d",&v);
    printf("请输入劈砍(穿刺)值:");
    scanf("%d",&a);
    printf("请输入强命值:");
    scanf("%d",&qm);
	qm=qm>30?qm:30;
    qm=qm<100?qm:100;
    qm=qm/100;
    z=z+v;
    a1=a2=a3=a4=a5=a;
    //保存a的初值
    printf("请输入怪物总血量:");
    scanf("%d",&o);
    o1 = o2 = o3 = o4 = o5 = o6 = o;
   
    while (b < 5) {
    	if (o1 <= 0 && o2 <= 0 && o3 <= 0 && o4 <= 0 && o5 <= 0 && o6 <= 0) {
                break;
    	}
     	b++;//回合
        //魔化持续5回合
        if (a < h) {
            d = a;//保存a的返回值
            a = a * 1.24;//叠魔化得值
        }
        c = a - d;//叠加的值
        a = a > h ? h : a;//判断劈砍(穿刺值)
        z = z + 6;//攻次叠加
        z = z > 99 ? 99 : z;//判断攻次
        l = (k * z + a) * 1.5;//基础伤害值
        m = l * 0.3 < o1 ? l * 0.3 : o1;//全减免疫伤害(魔攻无效)
        y = l * 0.3* qm < o2 ? l * 0.3 * qm : o2;//全减免疫(魔攻无效)强命伤害
        x = (k * (z - 7) + a) * 1.5 * 0.3 < o3 ? (k * (z - 7) + a) * 1.5 * 0.3 : o3;//全减免疫(魔攻无效)最低伤害
        r = l < o4 ? l : o4;//全减免疫伤害(魔攻有效)
        y1 = l * qm < o5 ? l * qm : o5;//全减免疫(魔攻有效)强命伤害
        x1 = (k * (z - 7) + a) * 1.5 < o6 ? (k * (z - 7) + a) : o6;//全减免疫(魔攻有效)最低伤害

        o1 = o1 - m > 0 ? o1 - m : 0;
        o2 = o2 - y > 0 ? o2 - y : 0;
        o3 = o3 - x > 0 ? o3 - x : 0;
        o4 = o4 - r > 0 ? o4 - r : 0;
        o5 = o5 - y1 > 0 ? o5 - y1 : 0;
        o6 = o6 - x1 > 0 ? o6 - x1 : 0;
        printf("【当前的回合%d】\n", b);
        printf("当前的攻次:%d\n", z);
        printf("当前的劈砍(穿刺)值%d\n", a);

        if (o1 <= 0) {
            if (k1 == 1) {
                printf("全减免疫伤害(魔攻无效):%d\n", m);
            }
            printf("全减免疫(魔攻无效)伤害任务已完成\n");
        } else {
            printf("全减免疫伤害(魔攻无效):%d\n", m);
            printf("全减免疫(魔攻无效)剩余生命:%.0f\n\n", o1);
        }

        if (o2 <= 0) {
            if (k2 == 1) {
                printf("全减免疫魔免伤害(强命):%.2f\n", y);
            }
           printf("全减免疫魔免(强命)伤害任务已完成\n");
        } else {
            printf("全减免疫魔免伤害(强命):%.2f\n", y);
            printf("全减免疫魔免(强命)剩余生命:%.0f\n\n", o2);
        }

        if (o3 <= 0) {
            if (k3 == 1) {
                printf("全减免疫魔免最低伤害:%.0f\n", x);
            }
            printf("全减免疫魔免最低伤害任务已完成\n");
        } else {
            printf("全减免疫魔免最低伤害:%.0f\n", x);
            printf("全减免疫魔免最低伤害剩余生命:%.0f\n\n", o3);
        }

        if (o4 <= 0) {
            if (k4 == 1) {
                printf("全减免疫伤害(魔攻有效):%d\n", r);
            }
            printf("全减免疫伤害(魔攻有效)任务已完成\n");
        } else {
            printf("全减免疫伤害(魔攻有效):%d\n", r);
            printf("全减免疫伤害(魔攻有效)剩余生命:%.0f\n\n", o4);
        }

        if (o5 <= 0) {
            if (k5 == 1) {
                printf("全减魔攻有效伤害(强命):%.2f\n", y1);
            }
            printf("全减魔攻有效伤害(强命)任务已完成\n");
        } else {
            printf("全减魔攻有效伤害(强命):%.2f\n", y1);
            printf("全减魔攻有效伤害(强命)剩余生命:%.0f\n\n", o5);
        }

        if (o6 <= 0) {
            if (k6 == 1) {
                printf("全减魔攻有效最低伤害:%.0f\n", x1);
            }
            printf("全减魔攻有效最低伤害任务已完成\n\n");
        } else {
            printf("全减魔攻有效最低伤害:%.0f\n", x1);
            printf("全减魔攻有效最低伤害剩余生命:%.0f\n", o6);
        }
        if (k1 == 1 && o1 <= 0) {
           printf("┉┉┉┉┉┉┉全减免疫伤害(魔攻无效)┉┉┉┉┉┉┉\n\n");
           k1++;
        }
        if (k2 == 1 && o2 <= 0) {
           printf("┉┉┉┉┉┉┉全减免疫魔免伤害(强命)┉┉┉┉┉┉┉\n\n");
           k2++;
        }
        if (k3 == 1 && o3 <= 0) {
            printf("┉┉┉┉┉┉┉全减免疫魔免最低伤害┉┉┉┉┉┉┉┉┉\n\n");
            k3++;
        }
        if (k4 == 1 && o4 <= 0) {
            printf("┉┉┉┉┉┉┉全减免疫伤害(魔攻有效)┉┉┉┉┉┉┉\n\n");
            k4++;
        }
        if (k5 == 1 && o5 <= 0) {
            printf("┉┉┉┉┉┉┉全减魔攻有效伤害(强命)┉┉┉┉┉┉┉\n\n");
            k5++;
        }
        if (k6 == 1 && o6 <= 0) {
            printf("┉┉┉┉┉┉┉全减魔攻有效最低伤害┉┉┉┉┉┉┉┉┉\n\n");
            k6++;
        }
	}
 	while(b<10) {
 		if (o1 <= 0 && o2 <= 0 && o3 <= 0 && o4 <= 0 && o5 <= 0 && o6 <= 0) {
                break;
    	}
    	b++;//回合
    	d1=a1;//保存e的返回值(第一轮顶得值)
    	a1=a1*1.24;//魔化叠加(第一轮顶得值)
    	c1=a1-d1;//叠加的值(第一轮顶得值)
    	d=a-c1;//保存a的返回值
    	a=(a-c1)*1.24;//魔化叠加
    	c=a-d;//叠加的值
    	a=a>h?h:a;//判断劈砍(穿刺值)
    	l=(k*z+a)*1.5;//基础伤害值
     	m = l * 0.3 < o1 ? l * 0.3 : o1;//全减免疫伤害(魔攻无效)
        y = l * 0.3* qm < o2 ? l * 0.3 * qm : o2;//全减免疫(魔攻无效)强命伤害
        x = (k * (z - 7) + a) * 1.5 * 0.3 < o3 ? (k * (z - 7) + a) * 1.5 * 0.3 : o3;//全减免疫(魔攻无效)最低伤害
        r = l < o4 ? l : o4;//全减免疫伤害(魔攻有效)
        y1 = l * qm < o5 ? l * qm : o5;//全减免疫(魔攻有效)强命伤害
        x1 = (k * (z - 7) + a) * 1.5 < o6 ? (k * (z - 7) + a) : o6;//全减免疫(魔攻有效)最低伤害

        o1 = o1 - m > 0 ? o1 - m : 0;
        o2 = o2 - y > 0 ? o2 - y : 0;
        o3 = o3 - x > 0 ? o3 - x : 0;
        o4 = o4 - r > 0 ? o4 - r : 0;
        o5 = o5 - y1 > 0 ? o5 - y1 : 0;
        o6 = o6 - x1 > 0 ? o6 - x1 : 0;
        printf("【当前的回合%d】\n", b);
        printf("当前的攻次:%d\n", z);
        printf("当前的劈砍(穿刺)值%d\n", a);

        if (o1 <= 0) {
            if (k1 == 1) {
                printf("全减免疫伤害(魔攻无效):%d\n", m);
            }
            printf("全减免疫(魔攻无效)伤害任务已完成\n");
        } else {
            printf("全减免疫伤害(魔攻无效):%d\n", m);
            printf("全减免疫(魔攻无效)剩余生命:%.0f\n\n", o1);
        }

        if (o2 <= 0) {
            if (k2 == 1) {
                printf("全减免疫魔免伤害(强命):%.2f\n", y);
            }
           printf("全减免疫魔免(强命)伤害任务已完成\n");
        } else {
            printf("全减免疫魔免伤害(强命):%.2f\n", y);
            printf("全减免疫魔免(强命)剩余生命:%.0f\n\n", o2);
        }

        if (o3 <= 0) {
            if (k3 == 1) {
                printf("全减免疫魔免最低伤害:%.0f\n", x);
            }
            printf("全减免疫魔免最低伤害任务已完成\n");
        } else {
            printf("全减免疫魔免最低伤害:%.0f\n", x);
            printf("全减免疫魔免最低伤害剩余生命:%.0f\n\n", o3);
        }

        if (o4 <= 0) {
            if (k4 == 1) {
                printf("全减免疫伤害(魔攻有效):%d\n", r);
            }
            printf("全减免疫伤害(魔攻有效)任务已完成\n");
        } else {
            printf("全减免疫伤害(魔攻有效):%d\n", r);
            printf("全减免疫伤害(魔攻有效)剩余生命:%.0f\n\n", o4);
        }

        if (o5 <= 0) {
            if (k5 == 1) {
                printf("全减魔攻有效伤害(强命):%.2f\n", y1);
            }
            printf("全减魔攻有效伤害(强命)任务已完成\n");
        } else {
            printf("全减魔攻有效伤害(强命):%.2f\n", y1);
            printf("全减魔攻有效伤害(强命)剩余生命:%.0f\n\n", o5);
        }

        if (o6 <= 0) {
            if (k6 == 1) {
                printf("全减魔攻有效最低伤害:%.0f\n", x1);
            }
            printf("全减魔攻有效最低伤害任务已完成\n\n");
        } else {
            printf("全减魔攻有效最低伤害:%.0f\n", x1);
            printf("全减魔攻有效最低伤害剩余生命:%.0f\n", o6);
        }
        if (k1 == 1 && o1 <= 0) {
           printf("┉┉┉┉┉┉┉全减免疫伤害(魔攻无效)┉┉┉┉┉┉┉\n\n");
           k1++;
        }
        if (k2 == 1 && o2 <= 0) {
           printf("┉┉┉┉┉┉┉全减免疫魔免伤害(强命)┉┉┉┉┉┉┉\n\n");
           k2++;
        }
        if (k3 == 1 && o3 <= 0) {
            printf("┉┉┉┉┉┉┉全减免疫魔免最低伤害┉┉┉┉┉┉┉┉┉\n\n");
            k3++;
        }
        if (k4 == 1 && o4 <= 0) {
            printf("┉┉┉┉┉┉┉全减免疫伤害(魔攻有效)┉┉┉┉┉┉┉\n\n");
            k4++;
        }
        if (k5 == 1 && o5 <= 0) {
            printf("┉┉┉┉┉┉┉全减魔攻有效伤害(强命)┉┉┉┉┉┉┉\n\n");
            k5++;
        }
        if (k6 == 1 && o6 <= 0) {
            printf("┉┉┉┉┉┉┉全减魔攻有效最低伤害┉┉┉┉┉┉┉┉┉\n\n");
            k6++;
        }
    }
   while(b<15) {
   		if (o1 <= 0 && o2 <= 0 && o3 <= 0 && o4 <= 0 && o5 <= 0 && o6 <= 0) {
                break;
    	}
    	b++;//回合
   	 	d2=a2;//保留a2的返回值(第二轮顶得值)
        a2=a2*1.24;//魔化叠加(第二轮顶得值)
        c2=a2-d2;//叠加的值(第二轮顶的值)
        d1=a1-c2;//保存a1的返回值(第一轮顶得值)
        a1=(a1-c2)*1.24;//魔化叠加(第一轮轮顶得值)
        c1=a1-d1;//叠加的值(第一轮顶的值)
        d=a-c1;//保存a的返回值
        a=(a-c1)*1.24;//魔化叠加
        c=a-d;//叠加的值
    	a=a>h?h:a;//判断劈砍(穿刺值)
   	 	l=(k*z+a)*1.5;//基础伤害值
         m = l * 0.3 < o1 ? l * 0.3 : o1;//全减免疫伤害(魔攻无效)
        y = l * 0.3* qm < o2 ? l * 0.3 * qm : o2;//全减免疫(魔攻无效)强命伤害
        x = (k * (z - 7) + a) * 1.5 * 0.3 < o3 ? (k * (z - 7) + a) * 1.5 * 0.3 : o3;//全减免疫(魔攻无效)最低伤害
        r = l < o4 ? l : o4;//全减免疫伤害(魔攻有效)
        y1 = l * qm < o5 ? l * qm : o5;//全减免疫(魔攻有效)强命伤害
        x1 = (k * (z - 7) + a) * 1.5 < o6 ? (k * (z - 7) + a) : o6;//全减免疫(魔攻有效)最低伤害

        o1 = o1 - m > 0 ? o1 - m : 0;
        o2 = o2 - y > 0 ? o2 - y : 0;
        o3 = o3 - x > 0 ? o3 - x : 0;
        o4 = o4 - r > 0 ? o4 - r : 0;
        o5 = o5 - y1 > 0 ? o5 - y1 : 0;
        o6 = o6 - x1 > 0 ? o6 - x1 : 0;
        printf("【当前的回合%d】\n", b);
        printf("当前的攻次:%d\n", z);
        printf("当前的劈砍(穿刺)值%d\n", a);

        if (o1 <= 0) {
            if (k1 == 1) {
                printf("全减免疫伤害(魔攻无效):%d\n", m);
            }
            printf("全减免疫(魔攻无效)伤害任务已完成\n");
        } else {
            printf("全减免疫伤害(魔攻无效):%d\n", m);
            printf("全减免疫(魔攻无效)剩余生命:%.0f\n\n", o1);
        }

        if (o2 <= 0) {
            if (k2 == 1) {
                printf("全减免疫魔免伤害(强命):%.2f\n", y);
            }
           printf("全减免疫魔免(强命)伤害任务已完成\n");
        } else {
            printf("全减免疫魔免伤害(强命):%.2f\n", y);
            printf("全减免疫魔免(强命)剩余生命:%.0f\n\n", o2);
        }

        if (o3 <= 0) {
            if (k3 == 1) {
                printf("全减免疫魔免最低伤害:%.0f\n", x);
            }
            printf("全减免疫魔免最低伤害任务已完成\n");
        } else {
            printf("全减免疫魔免最低伤害:%.0f\n", x);
            printf("全减免疫魔免最低伤害剩余生命:%.0f\n\n", o3);
        }

        if (o4 <= 0) {
            if (k4 == 1) {
                printf("全减免疫伤害(魔攻有效):%d\n", r);
            }
            printf("全减免疫伤害(魔攻有效)任务已完成\n");
        } else {
            printf("全减免疫伤害(魔攻有效):%d\n", r);
            printf("全减免疫伤害(魔攻有效)剩余生命:%.0f\n\n", o4);
        }

        if (o5 <= 0) {
            if (k5 == 1) {
                printf("全减魔攻有效伤害(强命):%.2f\n", y1);
            }
            printf("全减魔攻有效伤害(强命)任务已完成\n");
        } else {
            printf("全减魔攻有效伤害(强命):%.2f\n", y1);
            printf("全减魔攻有效伤害(强命)剩余生命:%.0f\n\n", o5);
        }

        if (o6 <= 0) {
            if (k6 == 1) {
                printf("全减魔攻有效最低伤害:%.0f\n", x1);
            }
            printf("全减魔攻有效最低伤害任务已完成\n\n");
        } else {
            printf("全减魔攻有效最低伤害:%.0f\n", x1);
            printf("全减魔攻有效最低伤害剩余生命:%.0f\n", o6);
        }
        if (k1 == 1 && o1 <= 0) {
           printf("┉┉┉┉┉┉┉全减免疫伤害(魔攻无效)┉┉┉┉┉┉┉\n\n");
           k1++;
        }
        if (k2 == 1 && o2 <= 0) {
           printf("┉┉┉┉┉┉┉全减免疫魔免伤害(强命)┉┉┉┉┉┉┉\n\n");
           k2++;
        }
        if (k3 == 1 && o3 <= 0) {
            printf("┉┉┉┉┉┉┉全减免疫魔免最低伤害┉┉┉┉┉┉┉┉┉\n\n");
            k3++;
        }
        if (k4 == 1 && o4 <= 0) {
            printf("┉┉┉┉┉┉┉全减免疫伤害(魔攻有效)┉┉┉┉┉┉┉\n\n");
            k4++;
        }
        if (k5 == 1 && o5 <= 0) {
            printf("┉┉┉┉┉┉┉全减魔攻有效伤害(强命)┉┉┉┉┉┉┉\n\n");
            k5++;
        }
        if (k6 == 1 && o6 <= 0) {
            printf("┉┉┉┉┉┉┉全减魔攻有效最低伤害┉┉┉┉┉┉┉┉┉\n\n");
            k6++;
        }
    }
     while(b<20) {
     	if (o1 <= 0 && o2 <= 0 && o3 <= 0 && o4 <= 0 && o5 <= 0 && o6 <= 0) {
                break;
    	}
    b++;//回合
    d3=a3;//保留a3的返回值(第三轮顶的值)
    a3=a3*1.24;//魔化叠加(第三轮顶的值)
    c3=a3-d3;//顶得值(第三轮顶的值)
    d2=a2-c3;//保留a2的返回值(第二轮顶得值)
    a2=(a2-c3)*1.24;//魔化叠加(第二轮顶得值)
    c2=a2-d2;//叠加的值(第二轮顶的值)
    d1=a1-c2;//保存a1的返回值(第一轮顶得值)
    a1=(a1-c2)*1.24;//魔化叠加(第一轮轮顶得值)
    c1=a1-d1;//叠加的值(第一轮顶的值)
    d=a-c1;//保存a的返回值
    a=(a-c1)*1.24;//魔化叠加
    c=a-d;//叠加的值
    a=a>h?h:a;//判断劈砍(穿刺值)
    l=(k*z+a)*1.5;//基础伤害值
    m = l * 0.3 < o1 ? l * 0.3 : o1;//全减免疫伤害(魔攻无效)
        y = l * 0.3* qm < o2 ? l * 0.3 * qm : o2;//全减免疫(魔攻无效)强命伤害
        x = (k * (z - 7) + a) * 1.5 * 0.3 < o3 ? (k * (z - 7) + a) * 1.5 * 0.3 : o3;//全减免疫(魔攻无效)最低伤害
        r = l < o4 ? l : o4;//全减免疫伤害(魔攻有效)
        y1 = l * qm < o5 ? l * qm : o5;//全减免疫(魔攻有效)强命伤害
        x1 = (k * (z - 7) + a) * 1.5 < o6 ? (k * (z - 7) + a) : o6;//全减免疫(魔攻有效)最低伤害

        o1 = o1 - m > 0 ? o1 - m : 0;
        o2 = o2 - y > 0 ? o2 - y : 0;
        o3 = o3 - x > 0 ? o3 - x : 0;
        o4 = o4 - r > 0 ? o4 - r : 0;
        o5 = o5 - y1 > 0 ? o5 - y1 : 0;
        o6 = o6 - x1 > 0 ? o6 - x1 : 0;
        printf("【当前的回合%d】\n", b);
        printf("当前的攻次:%d\n", z);
        printf("当前的劈砍(穿刺)值%d\n", a);

        if (o1 <= 0) {
            if (k1 == 1) {
                printf("全减免疫伤害(魔攻无效):%d\n", m);
            }
            printf("全减免疫(魔攻无效)伤害任务已完成\n");
        } else {
            printf("全减免疫伤害(魔攻无效):%d\n", m);
            printf("全减免疫(魔攻无效)剩余生命:%.0f\n\n", o1);
        }

        if (o2 <= 0) {
            if (k2 == 1) {
                printf("全减免疫魔免伤害(强命):%.2f\n", y);
            }
           printf("全减免疫魔免(强命)伤害任务已完成\n");
        } else {
            printf("全减免疫魔免伤害(强命):%.2f\n", y);
            printf("全减免疫魔免(强命)剩余生命:%.0f\n\n", o2);
        }

        if (o3 <= 0) {
            if (k3 == 1) {
                printf("全减免疫魔免最低伤害:%.0f\n", x);
            }
            printf("全减免疫魔免最低伤害任务已完成\n");
        } else {
            printf("全减免疫魔免最低伤害:%.0f\n", x);
            printf("全减免疫魔免最低伤害剩余生命:%.0f\n\n", o3);
        }

        if (o4 <= 0) {
            if (k4 == 1) {
                printf("全减免疫伤害(魔攻有效):%d\n", r);
            }
            printf("全减免疫伤害(魔攻有效)任务已完成\n");
        } else {
            printf("全减免疫伤害(魔攻有效):%d\n", r);
            printf("全减免疫伤害(魔攻有效)剩余生命:%.0f\n\n", o4);
        }

        if (o5 <= 0) {
            if (k5 == 1) {
                printf("全减魔攻有效伤害(强命):%.2f\n", y1);
            }
            printf("全减魔攻有效伤害(强命)任务已完成\n");
        } else {
            printf("全减魔攻有效伤害(强命):%.2f\n", y1);
            printf("全减魔攻有效伤害(强命)剩余生命:%.0f\n\n", o5);
        }

        if (o6 <= 0) {
            if (k6 == 1) {
                printf("全减魔攻有效最低伤害:%.0f\n", x1);
            }
            printf("全减魔攻有效最低伤害任务已完成\n\n");
        } else {
            printf("全减魔攻有效最低伤害:%.0f\n", x1);
            printf("全减魔攻有效最低伤害剩余生命:%.0f\n", o6);
        }
        if (k1 == 1 && o1 <= 0) {
           printf("┉┉┉┉┉┉┉全减免疫伤害(魔攻无效)┉┉┉┉┉┉┉\n\n");
           k1++;
        }
        if (k2 == 1 && o2 <= 0) {
           printf("┉┉┉┉┉┉┉全减免疫魔免伤害(强命)┉┉┉┉┉┉┉\n\n");
           k2++;
        }
        if (k3 == 1 && o3 <= 0) {
            printf("┉┉┉┉┉┉┉全减免疫魔免最低伤害┉┉┉┉┉┉┉┉┉\n\n");
            k3++;
        }
        if (k4 == 1 && o4 <= 0) {
            printf("┉┉┉┉┉┉┉全减免疫伤害(魔攻有效)┉┉┉┉┉┉┉\n\n");
            k4++;
        }
        if (k5 == 1 && o5 <= 0) {
            printf("┉┉┉┉┉┉┉全减魔攻有效伤害(强命)┉┉┉┉┉┉┉\n\n");
            k5++;
        }
        if (k6 == 1 && o6 <= 0) {
            printf("┉┉┉┉┉┉┉全减魔攻有效最低伤害┉┉┉┉┉┉┉┉┉\n\n");
            k6++;
        }
	}
    while(b<25) {
    	if (o1 <= 0 && o2 <= 0 && o3 <= 0 && o4 <= 0 && o5 <= 0 && o6 <= 0) {
                break;
    	}
        b++;//回合
        d4=a4;//保留a4的返回值(第四轮顶的值)
        a4=a4*1.24;//魔化叠加的值(第四轮顶的值)
        c4=a4-d4;//顶的值(第四轮顶的值)
        d3=a3-c4;//保留a3的返回值(第三轮顶的值)
        a3=(a3-c4)*1.24;//魔化叠加(第三轮顶的值)
        c3=a3-d3;//顶得值(第三轮顶的值)
        d2=a2-c3;//保留a2的返回值(第二轮顶得值)
        a2=(a2-c3)*1.24;//魔化叠加(第二轮顶得值)
        c2=a2-d2;//叠加的值(第二轮顶的值)
        d1=a1-c2;//保存a1的返回值(第一轮顶得值)
        a1=(a1-c2)*1.24;//魔化叠加(第一轮轮顶得值)
        c1=a1-d1;//叠加的值(第一轮顶的值)
        d=a-c1;//保存a的返回值
        a=(a-c1)*1.24;//魔化叠加
        c=a-d;//叠加的值
        a=a>h?h:a;//判断劈砍(穿刺值)
        l=(k*z+a)*1.5;//基础伤害值
        m = l * 0.3 < o1 ? l * 0.3 : o1;//全减免疫伤害(魔攻无效)
        y = l * 0.3* qm < o2 ? l * 0.3 * qm : o2;//全减免疫(魔攻无效)强命伤害
        x = (k * (z - 7) + a) * 1.5 * 0.3 < o3 ? (k * (z - 7) + a) * 1.5 * 0.3 : o3;//全减免疫(魔攻无效)最低伤害
        r = l < o4 ? l : o4;//全减免疫伤害(魔攻有效)
        y1 = l * qm < o5 ? l * qm : o5;//全减免疫(魔攻有效)强命伤害
        x1 = (k * (z - 7) + a) * 1.5 < o6 ? (k * (z - 7) + a) : o6;//全减免疫(魔攻有效)最低伤害

        o1 = o1 - m > 0 ? o1 - m : 0;
        o2 = o2 - y > 0 ? o2 - y : 0;
        o3 = o3 - x > 0 ? o3 - x : 0;
        o4 = o4 - r > 0 ? o4 - r : 0;
        o5 = o5 - y1 > 0 ? o5 - y1 : 0;
        o6 = o6 - x1 > 0 ? o6 - x1 : 0;
        printf("【当前的回合%d】\n", b);
        printf("当前的攻次:%d\n", z);
        printf("当前的劈砍(穿刺)值%d\n", a);

        if (o1 <= 0) {
            if (k1 == 1) {
                printf("全减免疫伤害(魔攻无效):%d\n", m);
            }
            printf("全减免疫(魔攻无效)伤害任务已完成\n");
        } else {
            printf("全减免疫伤害(魔攻无效):%d\n", m);
            printf("全减免疫(魔攻无效)剩余生命:%.0f\n\n", o1);
        }

        if (o2 <= 0) {
            if (k2 == 1) {
                printf("全减免疫魔免伤害(强命):%.2f\n", y);
            }
           printf("全减免疫魔免(强命)伤害任务已完成\n");
        } else {
            printf("全减免疫魔免伤害(强命):%.2f\n", y);
            printf("全减免疫魔免(强命)剩余生命:%.0f\n\n", o2);
        }

        if (o3 <= 0) {
            if (k3 == 1) {
                printf("全减免疫魔免最低伤害:%.0f\n", x);
            }
            printf("全减免疫魔免最低伤害任务已完成\n");
        } else {
            printf("全减免疫魔免最低伤害:%.0f\n", x);
            printf("全减免疫魔免最低伤害剩余生命:%.0f\n\n", o3);
        }

        if (o4 <= 0) {
            if (k4 == 1) {
                printf("全减免疫伤害(魔攻有效):%d\n", r);
            }
            printf("全减免疫伤害(魔攻有效)任务已完成\n");
        } else {
            printf("全减免疫伤害(魔攻有效):%d\n", r);
            printf("全减免疫伤害(魔攻有效)剩余生命:%.0f\n\n", o4);
        }

        if (o5 <= 0) {
            if (k5 == 1) {
                printf("全减魔攻有效伤害(强命):%.2f\n", y1);
            }
            printf("全减魔攻有效伤害(强命)任务已完成\n");
        } else {
            printf("全减魔攻有效伤害(强命):%.2f\n", y1);
            printf("全减魔攻有效伤害(强命)剩余生命:%.0f\n\n", o5);
        }

        if (o6 <= 0) {
            if (k6 == 1) {
                printf("全减魔攻有效最低伤害:%.0f\n", x1);
            }
            printf("全减魔攻有效最低伤害任务已完成\n\n");
        } else {
            printf("全减魔攻有效最低伤害:%.0f\n", x1);
            printf("全减魔攻有效最低伤害剩余生命:%.0f\n", o6);
        }
        if (k1 == 1 && o1 <= 0) {
           printf("┉┉┉┉┉┉┉全减免疫伤害(魔攻无效)┉┉┉┉┉┉┉\n\n");
           k1++;
        }
        if (k2 == 1 && o2 <= 0) {
           printf("┉┉┉┉┉┉┉全减免疫魔免伤害(强命)┉┉┉┉┉┉┉\n\n");
           k2++;
        }
        if (k3 == 1 && o3 <= 0) {
            printf("┉┉┉┉┉┉┉全减免疫魔免最低伤害┉┉┉┉┉┉┉┉┉\n\n");
            k3++;
        }
        if (k4 == 1 && o4 <= 0) {
            printf("┉┉┉┉┉┉┉全减免疫伤害(魔攻有效)┉┉┉┉┉┉┉\n\n");
            k4++;
        }
        if (k5 == 1 && o5 <= 0) {
            printf("┉┉┉┉┉┉┉全减魔攻有效伤害(强命)┉┉┉┉┉┉┉\n\n");
            k5++;
        }
        if (k6 == 1 && o6 <= 0) {
            printf("┉┉┉┉┉┉┉全减魔攻有效最低伤害┉┉┉┉┉┉┉┉┉\n\n");
            k6++;
        }
    }
    while(b<30) {
    	if (o1 <= 0 && o2 <= 0 && o3 <= 0 && o4 <= 0 && o5 <= 0 && o6 <= 0) {
                break;
    	}
        b++;//回合
        d5=a5;//保留a5的返回值(第五轮顶的值)
        a5=a5*1.24;//魔化叠加的值(第五轮顶的值)
        c5=a5-d5;//顶的值(第五轮顶的值)
        d4=a4-c5;//保留a4的返回值(第四轮顶的值)
        a4=(a4-c5)*1.24;//魔化叠加的值(第四轮顶的值)
        c4=a4-d4;//顶的值(第四轮顶的值)
        d3=a3-c4;//保留a3的返回值(第三轮顶的值)
        a3=(a3-c4)*1.24;//魔化叠加(第三轮顶的值)
        c3=a3-d3;//顶得值(第三轮顶的值)
        d2=a2-c3;//保留a2的返回值(第二轮顶得值)
        a2=(a2-c3)*1.24;//魔化叠加(第二轮顶得值)
        c2=a2-d2;//叠加的值(第二轮顶的值)
        d1=a1-c2;//保存a1的返回值(第一轮顶得值)
        a1=(a1-c2)*1.24;//魔化叠加(第一轮轮顶得值)
        c1=a1-d1;//叠加的值(第一轮顶的值)
        d=a-c1;//保存a的返回值
        a=(a-c1)*1.24;//魔化叠加
        c=a-d;//叠加的值
        a=a>h?h:a;//判断劈砍(穿刺值)
        l=(k*z+a)*1.5;//基础伤害值
        m = l * 0.3 < o1 ? l * 0.3 : o1;//全减免疫伤害(魔攻无效)
        y = l * 0.3* qm < o2 ? l * 0.3 * qm : o2;//全减免疫(魔攻无效)强命伤害
        x = (k * (z - 7) + a) * 1.5 * 0.3 < o3 ? (k * (z - 7) + a) * 1.5 * 0.3 : o3;//全减免疫(魔攻无效)最低伤害
        r = l < o4 ? l : o4;//全减免疫伤害(魔攻有效)
        y1 = l * qm < o5 ? l * qm : o5;//全减免疫(魔攻有效)强命伤害
        x1 = (k * (z - 7) + a) * 1.5 < o6 ? (k * (z - 7) + a) : o6;//全减免疫(魔攻有效)最低伤害

        o1 = o1 - m > 0 ? o1 - m : 0;
        o2 = o2 - y > 0 ? o2 - y : 0;
        o3 = o3 - x > 0 ? o3 - x : 0;
        o4 = o4 - r > 0 ? o4 - r : 0;
        o5 = o5 - y1 > 0 ? o5 - y1 : 0;
        o6 = o6 - x1 > 0 ? o6 - x1 : 0;
        printf("【当前的回合%d】\n", b);
        printf("当前的攻次:%d\n", z);
        printf("当前的劈砍(穿刺)值%d\n", a);

        if (o1 <= 0) {
            if (k1 == 1) {
                printf("全减免疫伤害(魔攻无效):%d\n", m);
            }
            printf("全减免疫(魔攻无效)伤害任务已完成\n");
        } else {
            printf("全减免疫伤害(魔攻无效):%d\n", m);
            printf("全减免疫(魔攻无效)剩余生命:%.0f\n\n", o1);
        }

        if (o2 <= 0) {
            if (k2 == 1) {
                printf("全减免疫魔免伤害(强命):%.2f\n", y);
            }
           printf("全减免疫魔免(强命)伤害任务已完成\n");
        } else {
            printf("全减免疫魔免伤害(强命):%.2f\n", y);
            printf("全减免疫魔免(强命)剩余生命:%.0f\n\n", o2);
        }

        if (o3 <= 0) {
            if (k3 == 1) {
                printf("全减免疫魔免最低伤害:%.0f\n", x);
            }
            printf("全减免疫魔免最低伤害任务已完成\n");
        } else {
            printf("全减免疫魔免最低伤害:%.0f\n", x);
            printf("全减免疫魔免最低伤害剩余生命:%.0f\n\n", o3);
        }

        if (o4 <= 0) {
            if (k4 == 1) {
                printf("全减免疫伤害(魔攻有效):%d\n", r);
            }
            printf("全减免疫伤害(魔攻有效)任务已完成\n");
        } else {
            printf("全减免疫伤害(魔攻有效):%d\n", r);
            printf("全减免疫伤害(魔攻有效)剩余生命:%.0f\n\n", o4);
        }

        if (o5 <= 0) {
            if (k5 == 1) {
                printf("全减魔攻有效伤害(强命):%.2f\n", y1);
            }
            printf("全减魔攻有效伤害(强命)任务已完成\n");
        } else {
            printf("全减魔攻有效伤害(强命):%.2f\n", y1);
            printf("全减魔攻有效伤害(强命)剩余生命:%.0f\n\n", o5);
        }

        if (o6 <= 0) {
            if (k6 == 1) {
                printf("全减魔攻有效最低伤害:%.0f\n", x1);
            }
            printf("全减魔攻有效最低伤害任务已完成\n\n");
        } else {
            printf("全减魔攻有效最低伤害:%.0f\n", x1);
            printf("全减魔攻有效最低伤害剩余生命:%.0f\n", o6);
        }
        if (k1 == 1 && o1 <= 0) {
           printf("┉┉┉┉┉┉┉全减免疫伤害(魔攻无效)┉┉┉┉┉┉┉\n\n");
           k1++;
        }
        if (k2 == 1 && o2 <= 0) {
           printf("┉┉┉┉┉┉┉全减免疫魔免伤害(强命)┉┉┉┉┉┉┉\n\n");
           k2++;
        }
        if (k3 == 1 && o3 <= 0) {
            printf("┉┉┉┉┉┉┉全减免疫魔免最低伤害┉┉┉┉┉┉┉┉┉\n\n");
            k3++;
        }
        if (k4 == 1 && o4 <= 0) {
            printf("┉┉┉┉┉┉┉全减免疫伤害(魔攻有效)┉┉┉┉┉┉┉\n\n");
            k4++;
        }
        if (k5 == 1 && o5 <= 0) {
            printf("┉┉┉┉┉┉┉全减魔攻有效伤害(强命)┉┉┉┉┉┉┉\n\n");
            k5++;
        }
        if (k6 == 1 && o6 <= 0) {
            printf("┉┉┉┉┉┉┉全减魔攻有效最低伤害┉┉┉┉┉┉┉┉┉\n\n");
            k6++;
        }
    }
    printf("\n"); 
    printf("按回车键退出......\n"); 
    getchar();
}
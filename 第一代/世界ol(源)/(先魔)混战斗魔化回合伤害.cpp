#include"stdio.h" 
int main()
{
    int a,a1,a2,a3,a4,a5;//a的值
    int b=0,b1=0,b2=0,b3=0,b4=0,b5=0;
    //a的初值值保存
    int c=0,c1=0,c2=0,c3=0,c4=0,c5=0;
    //魔化叠加的值
    int e=0,e1=0,e2=0,e3=0,e4=0,e5=0;
    //a的返回值保存
    int f=0,f1=0,f2=0,f3=0,f4=0,f5=0;
    //战斗叠加的值
    int d=0,h=1000000,g;
    int i,j,k,v,z,l=0,m=0,n=0,o=0,p=0,q=0;
    int r=0,s=0,t=0,u=0;
    printf("【输入时请用逗号隔开最高与最低武商】\n");
    printf("请输入武商:");
    scanf("%d,%d",&i,&j);
    fflush(stdin);
    k=(i+j)/2;//武商
    printf("当前的武商值:%d\n",k);
    
    printf("请输入攻次:");
    scanf("%d",&z);
    fflush(stdin);
    printf("请输入主动技能加的攻次:");
    scanf("%d",&v);
	fflush(stdin);
    printf("请输入劈砍(穿刺)值:");
    scanf("%d",&a);
    fflush(stdin);
    a1=a2=a3=a4=a5=a;
    z=z+v;
    while(d<5) {
        if(a>=h) {
            break;
        }
        d++;
        b=a;//保留a的返回值
        if(d%2!=0) {
            a=a*1.24;//叠加魔化
            z=z+6;//攻次叠加
        }
        c=a-b;//魔化叠加的值
        g=f;//保留战斗叠加的值
        e=a-f;//保留a上一回合的值
        if(d%2==0) {
            a=(a-f)*1.4;//叠加战斗
        }
        f=a-e;//战斗叠加的值
        a=a>h?h:a;//判断劈砍(穿吃值)     
        z=z>99?99:z;//判断攻次
        l=(k*z+a)*1.5;//基础伤害值
        m=l*0.3;//全减免疫伤害(魔攻无效)
        o=l*1.1*0.3;//流血状态下伤害(魔攻无效)
        p=l*1.2*0.3;//衰弱状态下伤害(魔攻无效)
        q=l*1.1*1.2*0.3;//双状态下伤害(魔攻无效)
        r=l;//全减免疫伤害(魔攻有效)
        s=l*1.1;//流血状态下伤害(魔攻有效)
        t=l*1.2;//衰弱状态下伤害(魔攻有效)
        u=l*1.1*1.2;//双状态下伤害(魔攻有效)
        printf("【当前的回合%d】\n",d);
        printf("当前的攻次:%d\n",z);
        printf("当前的劈砍(穿刺)值%d\n",a);
        printf("全减免疫伤害(魔攻无效):%d\n",m);
        printf("流血状态下伤害(魔攻无效):%d\n",o);
        printf("衰弱状态下伤害(魔攻无效):%d\n",p);
        printf("双状态下伤害(魔攻无效):%d\n",q);
        printf("全减免疫伤害(魔攻有效)%d\n",r);
        printf("流血状态下伤害(魔攻有效):%d\n",s);
        printf("衰弱状态下伤害(魔攻有效)::%d\n",t);
        printf("双状态下伤害(魔攻有效):%d\n",u);
    }
    while(d<10) {
        if(a>=h) {
            break;
        }
        d++;
        b1=a1;//保留a的返回值
        if(d%2!=0) {
            a1=a1*1.24;//叠加魔化
        }
        c1=a1-b1;//魔化叠加的值
        e1=a1-f1;//保留a1上一回合的值
        if(d%2==0) {
            a1=(a1-f1)*1.4;//叠加战斗
        }
        f1=a1-e1;//叠加魔化的值
        b=(a-c1);//保留a的返回值
        if(d%2!=0) {
            a=(a-c1)*1.24;//叠加魔化
        }
        c=a-b;//魔化叠加的值
        g=f;//保留战斗叠加的值
        e=a-f;//保留a上一回合的值
        if(d%2==0) {
            a=(a-f)*1.4;//叠加战斗
        }
        f=a-e;//战斗叠加的值
        a=a>h?h:a;
        l=(k*z+a)*1.5;//基础伤害值
        m=l*0.3;//全减免疫伤害(魔攻无效)
        o=l*1.1*0.3;//流血状态下伤害(魔攻无效)
        p=l*1.2*0.3;//衰弱状态下伤害(魔攻无效)
        q=l*1.1*1.2*0.3;//双状态下伤害(魔攻无效)
        r=l;//全减免疫伤害(魔攻有效)
        s=l*1.1;//流血状态下伤害(魔攻有效)
        t=l*1.2;//衰弱状态下伤害(魔攻有效)
        u=l*1.1*1.2;//双状态下伤害(魔攻有效)
        printf("【当前的回合%d】\n",d);
        printf("当前的攻次:%d\n",z);
        printf("当前的劈砍(穿刺)值%d\n",a);
        printf("全减免疫伤害(魔攻无效):%d\n",m);
        printf("流血状态下伤害(魔攻无效):%d\n",o);
        printf("衰弱状态下伤害(魔攻无效):%d\n",p);
        printf("双状态下伤害(魔攻无效):%d\n",q);
        printf("全减免疫伤害(魔攻有效)%d\n",r);
        printf("流血状态下伤害(魔攻有效):%d\n",s);
        printf("衰弱状态下伤害(魔攻有效)::%d\n",t);
        printf("双状态下伤害(魔攻有效):%d\n",u);
    }
    while(d<15) {
        if(a>=h) {
            break;
        }
        d++;
        b2=a2;//保留a2的返回值
        if(d%2!=0) {
            a2=a2*1.24;//叠加魔化
        }
        c2=a2-b2;//魔化叠加的值
        e2=a2-f2;//保留a2上一回合的值
        if(d%2==0) {
            a2=(a2-f2)*1.4;//叠加战斗
        }
        f2=a2-e2;//战斗叠加的值
        b1=(a1-c2);//保留a1的返回值
        if(d%2!=0) {
            a1=(a1-c2)*1.24;//叠加魔化
        }
        c1=a1-b1;//叠加的值
        e1=a1-f1;//保留a1上一回合的值
        if(d%2==0) {
            a1=(a1-f1)*1.4;//叠加战斗
        }
        f1=a1-e1;//战斗叠加的值
        b=(a-c1);//保留a的返回值
        if(d%2!=0) {
            a=(a-c1)*1.24;//叠加魔化
        }
        c=a-b;//魔化叠加的值
        g=f;//保留战斗叠加的值
        e=a-f;//保留a上一回合的值
        if(d%2==0) {
            a=(a-f)*1.4;//叠加战斗
        }
        f=a-e;//战斗叠加的值
        a=a>h?h:a;
        l=(k*z+a)*1.5;//基础伤害值
        m=l*0.3;//全减免疫伤害(魔攻无效)
        o=l*1.1*0.3;//流血状态下伤害(魔攻无效)
        p=l*1.2*0.3;//衰弱状态下伤害(魔攻无效)
        q=l*1.1*1.2*0.3;//双状态下伤害(魔攻无效)
        r=l;//全减免疫伤害(魔攻有效)
        s=l*1.1;//流血状态下伤害(魔攻有效)
        t=l*1.2;//衰弱状态下伤害(魔攻有效)
        u=l*1.1*1.2;//双状态下伤害(魔攻有效)
        printf("【当前的回合%d】\n",d);
        printf("当前的攻次:%d\n",z);
        printf("当前的劈砍(穿刺)值%d\n",a);
        printf("全减免疫伤害(魔攻无效):%d\n",m);
        printf("流血状态下伤害(魔攻无效):%d\n",o);
        printf("衰弱状态下伤害(魔攻无效):%d\n",p);
        printf("双状态下伤害(魔攻无效):%d\n",q);
        printf("全减免疫伤害(魔攻有效)%d\n",r);
        printf("流血状态下伤害(魔攻有效):%d\n",s);
        printf("衰弱状态下伤害(魔攻有效)::%d\n",t);
        printf("双状态下伤害(魔攻有效):%d\n",u);
    }
    while(d<20) {
        if(a>=h) {
            break;
        }
        d++;
        b3=a3;//保留a3的返回值
        if(d%2!=0) {
            a3=a3*1.24;//叠加魔化
        }
        c3=a3-b3;//魔化叠加的值
        e3=a3-f3;//保留a3上一回合的值
        if(d%2==0) {
            a3=(a3-f3)*1.4;//叠加战斗
        }
        f3=a3-e3;//战斗叠加的值
        b2=(a2-c3);//保留a2的返回值
        if(d%2!=0) {
            a2=(a2-c3)*1.24;//叠加魔化
        }
        c2=a2-b2;//魔化叠加的值
        e2=a2-f2;//保留a2上一回合的值
        if(d%2==0) {
            a2=(a2-f2)*1.4;//叠加战斗
        }
        f2=a2-e2;//战斗叠加的值
        b1=(a1-c2);//保留a1的返回值
        if(d%2!=0) {
            a1=(a1-c2)*1.24;//叠加魔化
        }
        c1=a1-b1;//魔化叠加的值
        e1=a1-f1;//保留a1上一回合的值
        if(d%2==0) {
            a1=(a1-f1)*1.4;//叠加战斗
        }
        f1=a1-e1;//战斗叠加的值
        b=(a-c1);//保留a的返回值
        if(d%2!=0) {
            a=(a-c1)*1.24;//叠加魔化
        }
        c=a-b;//魔化叠加的值
        g=f;//保留战斗叠加的值
        e=a-f;//保留a上一回合的值
        if(d%2==0) {
            a=(a-f)*1.4;//叠加战斗
        }
        f=a-e;//战斗叠加的值
        a=a>h?h:a;
        l=(k*z+a)*1.5;//基础伤害值
        m=l*0.3;//全减免疫伤害(魔攻无效)
        o=l*1.1*0.3;//流血状态下伤害(魔攻无效)
        p=l*1.2*0.3;//衰弱状态下伤害(魔攻无效)
        q=l*1.1*1.2*0.3;//双状态下伤害(魔攻无效)
        r=l;//全减免疫伤害(魔攻有效)
        s=l*1.1;//流血状态下伤害(魔攻有效)
        t=l*1.2;//衰弱状态下伤害(魔攻有效)
        u=l*1.1*1.2;//双状态下伤害(魔攻有效)
        printf("【当前的回合%d】\n",d);
        printf("当前的攻次:%d\n",z);
        printf("当前的劈砍(穿刺)值%d\n",a);
        printf("全减免疫伤害(魔攻无效):%d\n",m);
        printf("流血状态下伤害(魔攻无效):%d\n",o);
        printf("衰弱状态下伤害(魔攻无效):%d\n",p);
        printf("双状态下伤害(魔攻无效):%d\n",q);
        printf("全减免疫伤害(魔攻有效)%d\n",r);
        printf("流血状态下伤害(魔攻有效):%d\n",s);
        printf("衰弱状态下伤害(魔攻有效)::%d\n",t);
        printf("双状态下伤害(魔攻有效):%d\n",u);
    }
    while(d<25) {
        if(a>=h) {
            break;
        }
        d++;
        b4=a4;//保留a4的返回值
        if(d%2!=0) {
            a4=a4*1.24;//叠加魔化
        }
        c4=a4-b4;//魔化叠加的值
        e4=a4-f4;//保留a4上一回合的值
        if(d%2==0) {
            a4=(a4-f4)*1.4;//叠加战斗
        }
        f4=a4-e4;//战斗叠加的值
        b3=(a3-c4);//保留a3的返回值
        if(d%2!=0) {
            a3=(a3-c4)*1.24;//叠加魔化
        }
        c3=a3-b3;//魔化叠加的值
        e3=a3-f3;//保留a3上一回合的值
        if(d%2==0) {
            a3=(a3-f3)*1.4;//叠加战斗
        }
        f3=a3-e3;//战斗叠加的值
        b2=(a2-c3);//保留a2的返回值
        if(d%2!=0) {
            a2=(a2-c3)*1.24;//叠加魔化
        }
        c2=a2-b2;//魔化叠加的值
        e2=a2-f2;//保留a2上一回合叠加的值
        if(d%2==0) {
            a2=(a2-f2)*1.4;//叠加战斗
        }
        f2=a2-e2;//战斗叠加的值
        b1=(a1-c2);//保留a1的返回值
        if(d%2!=0) {
            a1=(a1-c2)*1.24;//叠加魔化
        }
        c1=a1-b1;//魔化叠加的值
        e1=a1-f1;//保留a1上一回合的值
        if(d%2==0) {
            a1=(a1-f1)*1.4;//叠加战斗
        }
        f1=a1-e1;//战斗叠加的值
        b=(a-c1);//保留a的返回值
        if(d%2!=0) {
            a=(a-c1)*1.24;//叠加魔化
        }
        c=a-b;//魔化叠加的值
        g=f;//保留战斗叠加的值
        e=a-f;//保留a上一回合的值
        if(d%2==0) {
            a=(a-f)*1.4;//叠加战斗
        }
        f=a-e;//战斗叠加的值
        a=a>h?h:a;
        l=(k*z+a)*1.5;//基础伤害值
        m=l*0.3;//全减免疫伤害(魔攻无效)
        o=l*1.1*0.3;//流血状态下伤害(魔攻无效)
        p=l*1.2*0.3;//衰弱状态下伤害(魔攻无效)
        q=l*1.1*1.2*0.3;//双状态下伤害(魔攻无效)
        r=l;//全减免疫伤害(魔攻有效)
        s=l*1.1;//流血状态下伤害(魔攻有效)
        t=l*1.2;//衰弱状态下伤害(魔攻有效)
        u=l*1.1*1.2;//双状态下伤害(魔攻有效)
        printf("【当前的回合%d】\n",d);
        printf("当前的攻次:%d\n",z);
        printf("当前的劈砍(穿刺)值%d\n",a);
        printf("全减免疫伤害(魔攻无效):%d\n",m);
        printf("流血状态下伤害(魔攻无效):%d\n",o);
        printf("衰弱状态下伤害(魔攻无效):%d\n",p);
        printf("双状态下伤害(魔攻无效):%d\n",q);
        printf("全减免疫伤害(魔攻有效)%d\n",r);
        printf("流血状态下伤害(魔攻有效):%d\n",s);
        printf("衰弱状态下伤害(魔攻有效)::%d\n",t);
        printf("双状态下伤害(魔攻有效):%d\n",u);
    }
    while(d<30) {
        if(a>=h) {
            break;
        }
        d++;
        b5=a5;//保留a5的返回值
        if(d%2!=0) {
            a5=a5*1.24;//叠加魔化
        }
        c5=a5-b5;//魔化叠加的值
        e5=a5-f5;//保留a5上一回合的值
        if(d%2==0) {
            a5=(a5-f5)*1.4;//叠加战斗
        }
        f5=a5-e5;//战斗叠加的值
        b4=(a4-c5);//保留a4的返回值
        if(d%2!=0) {
            a4=(a4-c5)*1.24;//叠加魔化
        }
        c4=a4-b4;//魔化叠加的值
        e4=a4-f4;//保留a4上一回合的值
        if(d%2==0) {
            a4=(a4-f4)*1.4;//叠加战斗
        }
        f4=a4-e4;//战斗叠加的值
        b3=(a3-c4);//保留a3的返回值
        if(d%2!=0) {
            a3=(a3-c4)*1.24;//叠加魔化
        }
        c3=a3-b3;//魔化叠加的值
        e3=a3-f3;//保留a3上一回合的值
        if(d%2==0) {
            a3=(a3-f3)*1.4;//叠加战斗
        }
        f3=a3-e3;//战斗叠加的值
        b2=(a2-c3);//保留a2的返回值
        if(d%2!=0) {
            a2=(a2-c3)*1.24;//叠加魔化
        }
        c2=a2-b2;//魔化叠加的值
        e2=a2-f2;//保留a2上一回合的值
        if(d%2==0) {
            a2=(a2-f2)*1.4;//叠加战斗
        }
        f2=a2-e2;//战斗叠加的值
        b1=(a1-c2);//保留a1的返回值
        if(d%2!=0) {
            a1=(a1-c2)*1.24;//叠加魔化
        }
        c1=a1-b1;//魔化叠加的值
        e1=a1-f1;//保留a1上一回合的值
        if(d%2==0) {
            a1=(a1-f1)*1.4;//叠加战斗
        }
        f1=a1-e1;//魔化叠加的值
        b=(a-c1);//保留a的返回值
        if(d%2!=0) {
            a=(a-c1)*1.24;//叠加魔化
        }
        c=a-b;//魔化叠加的值
        g=f;//保留战斗叠加的值
        e=a-f;//保留a上一回合的值
        if(d%2==0) {
            a=(a-f)*1.4;//叠加战斗
        }
        f=a-e;//战斗叠加的值
        a=a>h?h:a;
        l=(k*z+a)*1.5;//基础伤害值
        m=l*0.3;//全减免疫伤害(魔攻无效)
        o=l*1.1*0.3;//流血状态下伤害(魔攻无效)
        p=l*1.2*0.3;//衰弱状态下伤害(魔攻无效)
        q=l*1.1*1.2*0.3;//双状态下伤害(魔攻无效)
        r=l;//全减免疫伤害(魔攻有效)
        s=l*1.1;//流血状态下伤害(魔攻有效)
        t=l*1.2;//衰弱状态下伤害(魔攻有效)
        u=l*1.1*1.2;//双状态下伤害(魔攻有效)
        printf("【当前的回合%d】\n",d);
        printf("当前的攻次:%d\n",z);
        printf("当前的劈砍(穿刺)值%d\n",a);
        printf("全减免疫伤害(魔攻无效):%d\n",m);
        printf("流血状态下伤害(魔攻无效):%d\n",o);
        printf("衰弱状态下伤害(魔攻无效):%d\n",p);
        printf("双状态下伤害(魔攻无效):%d\n",q);
        printf("全减免疫伤害(魔攻有效)%d\n",r);
        printf("流血状态下伤害(魔攻有效):%d\n",s);
        printf("衰弱状态下伤害(魔攻有效)::%d\n",t);
        printf("双状态下伤害(魔攻有效):%d\n",u);
    }
    fflush(stdin);
    printf("\n"); 
    printf("按回车键退出......\n"); 
    getchar();
    return 0; 
}

#include"stdio.h"
int main()
{
    int a,b=0,c=0,d=0, h=1000000,g;
    int a1=0,a2=0,a3=0,a4=0,a5=0;
    //叠加魔化(a后面的值为返回的伦数)
    int d1=0,d2=0,d3=0,d4=0,d5=0;
    //返回值(b后面得值为返回的伦数)
    int c1=0,c2=0,c3=0,c4=0,c5=0;
    //叠加得值(c后面得值为返回的伦数)
    int i,j,k,v,z,l=0,m=0,n=0,o=0,p=0,q=0;
    int r=0,s=0,t=0,u=0;
    int x=0,x1=0,x2=0;
    float y,y1=0,y2=0,y3=0;//强命和强命伤害
    printf("【输入时请用逗号隔开最高与最低武商】\n");
    printf("请输入武商:");
    scanf("%d,%d",&i,&j);
    k=(i+j)/2;//武商
    printf("当前的武商值:%d\n",k);
    printf("请输入攻次:");
    scanf("%d",&z);
    printf("请输入主动技能加的攻次:");
    scanf("%d",&v);
    printf("请输入强命值");
    scanf("%f",&y);
    y=y<=100?y:100;
    y=y/100;
    printf("请输入劈砍(穿刺)值:");
    scanf("%d",&a);
    z=z+v;
    a1=a2=a3=a4=a5=a;
    //保存a的初值
    while(b<5) {
        if(a>=h) {
            break;
        }
        //魔化持续5回合
        d=a;//保存a的返回值
        a=a*1.24;//叠魔化得值
        b++;//回合
        c=a-d;//叠加的值
        a=a>h?h:a;//判断劈砍(穿刺值)
        z=z+6;//攻次叠加
        z=z>99?99:z;//判断攻次
        l=(k*z+a)*1.5;//基础伤害值
        m=l*0.3;//全减免疫伤害(魔攻无效)
        o=l*1.1*0.3;//流血状态下伤害(魔攻无效)
        p=l*1.2*0.3;//衰弱状态下伤害(魔攻无效)
        q=l*1.1*1.2*0.3;//双状态下伤害(魔攻无效)
        r=l;//全减免疫伤害(魔攻有效)
        s=l*1.1;//流血状态下伤害(魔攻有效)
        t=l*1.2;//衰弱状态下伤害(魔攻有效)
        u=l*1.1*1.2;//双状态下伤害(魔攻有效)
        y1=m*y;//全减免疫(魔攻无效)强命伤害
        y2=r*y;//全减免疫(魔攻有效)强命伤害
        y3=u*y;//双状态强命伤害
        x=m/z*(z-7);//全减免疫(魔攻无效)最低伤害
        x1=r/z*(z-7);//全减免疫(魔攻有效)最低伤害
        x2=u/z*(z-7);//双状态下最低伤害
        printf("【当前的回合%d】\n",b);
        printf("当前的攻次:%d\n",z);
        printf("当前的劈砍(穿刺)值%d\n",a);
        printf("全减免疫伤害(魔免):%d\n",m);
        printf("全减免疫魔免伤害(强命):%.2f\n",y1);
        printf("损失值:%.2f\n",m-y1);
        printf("全减免疫魔免最低伤害:%d\n",x);
        printf("损失值:%d\n",m-x);
        printf("流血状态下伤害(魔免):%d\n",o);
        printf("衰弱状态下伤害(魔免):%d\n",p);
        printf("双状态下伤害(魔免):%d\n",q);
        printf("全减免疫伤害:%d\n",r);
        printf("全减魔攻有效伤害(强命)%.2f\n",y2);
        printf("损失值:%.2f\n",r-y2);
        printf("全减魔攻有效最低伤害:%d\n",x1);
        printf("损失值:%d\n",r-x1);
        printf("流血状态下伤害:%d\n",s);
        printf("衰弱状态下伤害:%d\n",t);
        printf("双状态下伤害:%d\n",u);
        printf("双状态伤害(强命):%.2f\n",y3);
        printf("损失值:%.2f\n",u-y3);
        printf("双状态最低伤害:%d\n",x2);
        printf("损失值:%d\n",u-x2);
    }
    while(b<10) {
        if(a>=h) {
            break;
        }
        b++;//回合
        d1=a1;//保存e的返回值(第一轮顶得值)
        a1=a1*1.24;//魔化叠加(第一轮顶得值)
        c1=a1-d1;//叠加的值(第一轮顶得值)
        d=a-c1;//保存a的返回值
        a=(a-c1)*1.24;//魔化叠加
        c=a-d;//叠加的值
        a=a>h?h:a;//判断劈砍(穿刺值)
        l=(k*z+a)*1.5;//基础伤害值
        m=l*0.3;//全减免疫伤害(魔攻无效)
        o=l*1.1*0.3;//流血状态下伤害(魔攻无效)
        p=l*1.2*0.3;//衰弱状态下伤害(魔攻无效)
        q=l*1.1*1.2*0.3;//双状态下伤害(魔攻无效)
        r=l;//全减免疫伤害(魔攻有效)
        s=l*1.1;//流血状态下伤害(魔攻有效)
        t=l*1.2;//衰弱状态下伤害(魔攻有效)
        u=l*1.1*1.2;//双状态下伤害(魔攻有效)
        y1=m*y;//全减免疫(魔攻无效)强命伤害
        y2=r*y;//全减免疫(魔攻有效)强命伤害
        y3=u*y;//双状态强命伤害
        x=m/z*(z-7);//全减免疫(魔攻无效)最低伤害
        x1=r/z*(z-7);//全减免疫(魔攻有效)最低伤害
        x2=u/z*(z-7);//双状态下最低伤害
        printf("【当前的回合%d】\n",b);
        printf("当前的攻次:%d\n",z);
        printf("当前的劈砍(穿刺)值%d\n",a);
        printf("全减免疫伤害(魔免):%d\n",m);
        printf("全减免疫魔免伤害(强命):%.2f\n",y1);
        printf("损失值:%.2f\n",m-y1);
        printf("全减免疫魔免最低伤害:%d\n",x);
        printf("损失值:%d\n",m-x);
        printf("流血状态下伤害(魔免):%d\n",o);
        printf("衰弱状态下伤害(魔免):%d\n",p);
        printf("双状态下伤害(魔免):%d\n",q);
        printf("全减免疫伤害:%d\n",r);
        printf("全减魔攻有效伤害(强命)%.2f\n",y2);
        printf("损失值:%.2f\n",r-y2);
        printf("全减魔攻有效最低伤害:%d\n",x1);
        printf("损失值:%d\n",r-x1);
        printf("流血状态下伤害:%d\n",s);
        printf("衰弱状态下伤害:%d\n",t);
        printf("双状态下伤害:%d\n",u);
        printf("双状态伤害(强命):%.2f\n",y3);
        printf("损失值:%.2f\n",u-y3);
        printf("双状态最低伤害:%d\n",x2);
        printf("损失值:%d\n",u-x2);
    }
    while(b<15) {
        if(a>=h) {
             break;
         }
        b++;//回合
        d2=a2;//保留a2的返回值(第二轮顶得值)
        a2=a2*1.24;//魔化叠加(第二轮顶得值)
        c2=a2-d2;//叠加的值(第二轮顶的值)
        d1=a1-c2;//保存a1的返回值(第一轮顶得值)
        a1=(a1-c2)*1.24;//魔化叠加(第一轮轮顶得值)
        c1=a1-d1;//叠加的值(第一轮顶的值)
        d=a-c1;//保存a的返回值
        a=(a-c1)*1.24;//魔化叠加
        c=a-d;//叠加的值
        a=a>h?h:a;//判断劈砍(穿刺值)
        l=(k*z+a)*1.5;//基础伤害值
        m=l*0.3;//全减免疫伤害(魔攻无效)
        o=l*1.1*0.3;//流血状态下伤害(魔攻无效)
        p=l*1.2*0.3;//衰弱状态下伤害(魔攻无效)
        q=l*1.1*1.2*0.3;//双状态下伤害(魔攻无效)
        r=l;//全减免疫伤害(魔攻有效)
        s=l*1.1;//流血状态下伤害(魔攻有效)
        t=l*1.2;//衰弱状态下伤害(魔攻有效)
        u=l*1.1*1.2;//双状态下伤害(魔攻有效)
        y1=m*y;//全减免疫(魔攻无效)强命伤害
        y2=r*y;//全减免疫(魔攻有效)强命伤害
        y3=u*y;//双状态强命伤害
        x=m/z*(z-7);//全减免疫(魔攻无效)最低伤害
        x1=r/z*(z-7);//全减免疫(魔攻有效)最低伤害
        x2=u/z*(z-7);//双状态下最低伤害
        printf("【当前的回合%d】\n",b);
        printf("当前的攻次:%d\n",z);
        printf("当前的劈砍(穿刺)值%d\n",a);
        printf("全减免疫伤害(魔免):%d\n",m);
        printf("全减免疫魔免伤害(强命):%.2f\n",y1);
        printf("损失值:%.2f\n",m-y1);
        printf("全减免疫魔免最低伤害:%d\n",x);
        printf("损失值:%d\n",m-x);
        printf("流血状态下伤害(魔免):%d\n",o);
        printf("衰弱状态下伤害(魔免):%d\n",p);
        printf("双状态下伤害(魔免):%d\n",q);
        printf("全减免疫伤害:%d\n",r);
        printf("全减魔攻有效伤害(强命)%.2f\n",y2);
        printf("损失值:%.2f\n",r-y2);
        printf("全减魔攻有效最低伤害:%d\n",x1);
        printf("损失值:%d\n",r-x1);
        printf("流血状态下伤害:%d\n",s);
        printf("衰弱状态下伤害:%d\n",t);
        printf("双状态下伤害:%d\n",u);
        printf("双状态伤害(强命):%.2f\n",y3);
        printf("损失值:%.2f\n",u-y3);
        printf("双状态最低伤害:%d\n",x2);
        printf("损失值:%d\n",u-x2);
    }
    while(b<20) {
        if(a>=h) {
            break;
        }
        b++;//回合
        d3=a3;//保留a3的返回值(第三轮顶的值)
        a3=a3*1.24;//魔化叠加(第三轮顶的值)
        c3=a3-d3;//顶得值(第三轮顶的值)
        d2=a2-c3;//保留a2的返回值(第二轮顶得值)
        a2=(a2-c3)*1.24;//魔化叠加(第二轮顶得值)
        c2=a2-d2;//叠加的值(第二轮顶的值)
        d1=a1-c2;//保存a1的返回值(第一轮顶得值)
        a1=(a1-c2)*1.24;//魔化叠加(第一轮轮顶得值)
        c1=a1-d1;//叠加的值(第一轮顶的值)
        d=a-c1;//保存a的返回值
        a=(a-c1)*1.24;//魔化叠加
        c=a-d;//叠加的值
        a=a>h?h:a;//判断劈砍(穿刺值)
        l=(k*z+a)*1.5;//基础伤害值
        m=l*0.3;//全减免疫伤害(魔攻无效)
        o=l*1.1*0.3;//流血状态下伤害(魔攻无效)
        p=l*1.2*0.3;//衰弱状态下伤害(魔攻无效)
        q=l*1.1*1.2*0.3;//双状态下伤害(魔攻无效)
        r=l;//全减免疫伤害(魔攻有效)
        s=l*1.1;//流血状态下伤害(魔攻有效)
        t=l*1.2;//衰弱状态下伤害(魔攻有效)
        u=l*1.1*1.2;//双状态下伤害(魔攻有效)
        y1=m*y;//全减免疫(魔攻无效)强命伤害
        y2=r*y;//全减免疫(魔攻有效)强命伤害
        y3=u*y;//双状态强命伤害
        x=m/z*(z-7);//全减免疫(魔攻无效)最低伤害
        x1=r/z*(z-7);//全减免疫(魔攻有效)最低伤害
        x2=u/z*(z-7);//双状态下最低伤害
        printf("【当前的回合%d】\n",b);
        printf("当前的攻次:%d\n",z);
        printf("当前的劈砍(穿刺)值%d\n",a);
        printf("全减免疫伤害(魔免):%d\n",m);
        printf("全减免疫魔免伤害(强命):%.2f\n",y1);
        printf("损失值:%.2f\n",m-y1);
        printf("全减免疫魔免最低伤害:%d\n",x);
        printf("损失值:%d\n",m-x);
        printf("流血状态下伤害(魔免):%d\n",o);
        printf("衰弱状态下伤害(魔免):%d\n",p);
        printf("双状态下伤害(魔免):%d\n",q);
        printf("全减免疫伤害:%d\n",r);
        printf("全减魔攻有效伤害(强命)%.2f\n",y2);
        printf("损失值:%.2f\n",r-y2);
        printf("全减魔攻有效最低伤害:%d\n",x1);
        printf("损失值:%d\n",r-x1);
        printf("流血状态下伤害:%d\n",s);
        printf("衰弱状态下伤害:%d\n",t);
        printf("双状态下伤害:%d\n",u);
        printf("双状态伤害(强命):%.2f\n",y3);
        printf("损失值:%.2f\n",u-y3);
        printf("双状态最低伤害:%d\n",x2);
        printf("损失值:%d\n",u-x2);
    }
    while(b<25) {
        if(a>=h) {
            break;
        }
        b++;//回合
        d4=a4;//保留a4的返回值(第四轮顶的值)
        a4=a4*1.24;//魔化叠加的值(第四轮顶的值)
        c4=a4-d4;//顶的值(第四轮顶的值)
        d3=a3-c4;//保留a3的返回值(第三轮顶的值)
        a3=(a3-c4)*1.24;//魔化叠加(第三轮顶的值)
        c3=a3-d3;//顶得值(第三轮顶的值)
        d2=a2-c3;//保留a2的返回值(第二轮顶得值)
        a2=(a2-c3)*1.24;//魔化叠加(第二轮顶得值)
        c2=a2-d2;//叠加的值(第二轮顶的值)
        d1=a1-c2;//保存a1的返回值(第一轮顶得值)
        a1=(a1-c2)*1.24;//魔化叠加(第一轮轮顶得值)
        c1=a1-d1;//叠加的值(第一轮顶的值)
        d=a-c1;//保存a的返回值
        a=(a-c1)*1.24;//魔化叠加
        c=a-d;//叠加的值
        a=a>h?h:a;//判断劈砍(穿刺值)
        l=(k*z+a)*1.5;//基础伤害值
        m=l*0.3;//全减免疫伤害(魔攻无效)
        o=l*1.1*0.3;//流血状态下伤害(魔攻无效)
        p=l*1.2*0.3;//衰弱状态下伤害(魔攻无效)
        q=l*1.1*1.2*0.3;//双状态下伤害(魔攻无效)
        r=l;//全减免疫伤害(魔攻有效)
        s=l*1.1;//流血状态下伤害(魔攻有效)
        t=l*1.2;//衰弱状态下伤害(魔攻有效)
        u=l*1.1*1.2;//双状态下伤害(魔攻有效)
        y1=m*y;//全减免疫(魔攻无效)强命伤害
        y2=r*y;//全减免疫(魔攻有效)强命伤害
        y3=u*y;//双状态强命伤害
        x=m/z*(z-7);//全减免疫(魔攻无效)最低伤害
        x1=r/z*(z-7);//全减免疫(魔攻有效)最低伤害
        x2=u/z*(z-7);//双状态下最低伤害
        printf("【当前的回合%d】\n",b);
        printf("当前的攻次:%d\n",z);
        printf("当前的劈砍(穿刺)值%d\n",a);
        printf("全减免疫伤害(魔免):%d\n",m);
        printf("全减免疫魔免伤害(强命):%.2f\n",y1);
        printf("损失值:%.2f\n",m-y1);
        printf("全减免疫魔免最低伤害:%d\n",x);
        printf("损失值:%d\n",m-x);
        printf("流血状态下伤害(魔免):%d\n",o);
        printf("衰弱状态下伤害(魔免):%d\n",p);
        printf("双状态下伤害(魔免):%d\n",q);
        printf("全减免疫伤害:%d\n",r);
        printf("全减魔攻有效伤害(强命)%.2f\n",y2);
        printf("损失值:%.2f\n",r-y2);
        printf("全减魔攻有效最低伤害:%d\n",x1);
        printf("损失值:%d\n",r-x1);
        printf("流血状态下伤害:%d\n",s);
        printf("衰弱状态下伤害:%d\n",t);
        printf("双状态下伤害:%d\n",u);
        printf("双状态伤害(强命):%.2f\n",y3);
        printf("损失值:%.2f\n",u-y3);
        printf("双状态最低伤害:%d\n",x2);
        printf("损失值:%d\n",u-x2);
    }
    while(b<30) {
        if(a>=h) {
            break;
        }
        b++;//回合
        d5=a5;//保留a5的返回值(第五轮顶的值)
        a5=a5*1.24;//魔化叠加的值(第五轮顶的值)
        c5=a5-d5;//顶的值(第五轮顶的值)
        d4=a4-c5;//保留a4的返回值(第四轮顶的值)
        a4=(a4-c5)*1.24;//魔化叠加的值(第四轮顶的值)
        c4=a4-d4;//顶的值(第四轮顶的值)
        d3=a3-c4;//保留a3的返回值(第三轮顶的值)
        a3=(a3-c4)*1.24;//魔化叠加(第三轮顶的值)
        c3=a3-d3;//顶得值(第三轮顶的值)
        d2=a2-c3;//保留a2的返回值(第二轮顶得值)
        a2=(a2-c3)*1.24;//魔化叠加(第二轮顶得值)
        c2=a2-d2;//叠加的值(第二轮顶的值)
        d1=a1-c2;//保存a1的返回值(第一轮顶得值)
        a1=(a1-c2)*1.24;//魔化叠加(第一轮轮顶得值)
        c1=a1-d1;//叠加的值(第一轮顶的值)
        d=a-c1;//保存a的返回值
        a=(a-c1)*1.24;//魔化叠加
        c=a-d;//叠加的值
        a=a>h?h:a;//判断劈砍(穿刺值)
        l=(k*z+a)*1.5;//基础伤害值
        m=l*0.3;//全减免疫伤害(魔攻无效)
        o=l*1.1*0.3;//流血状态下伤害(魔攻无效)
        p=l*1.2*0.3;//衰弱状态下伤害(魔攻无效)
        q=l*1.1*1.2*0.3;//双状态下伤害(魔攻无效)
        r=l;//全减免疫伤害(魔攻有效)
        s=l*1.1;//流血状态下伤害(魔攻有效)
        t=l*1.2;//衰弱状态下伤害(魔攻有效)
        u=l*1.1*1.2;//双状态下伤害(魔攻有效)
        y1=m*y;//全减免疫(魔攻无效)强命伤害
        y2=r*y;//全减免疫(魔攻有效)强命伤害
        y3=u*y;//双状态强命伤害
        x=m/z*(z-7);//全减免疫(魔攻无效)最低伤害
        x1=r/z*(z-7);//全减免疫(魔攻有效)最低伤害
        x2=u/z*(z-7);//双状态下最低伤害
        printf("【当前的回合%d】\n",b);
        printf("当前的攻次:%d\n",z);
        printf("当前的劈砍(穿刺)值%d\n",a);
        printf("全减免疫伤害(魔免):%d\n",m);
        printf("全减免疫魔免伤害(强命):%.2f\n",y1);
        printf("损失值:%.2f\n",m-y1);
        printf("全减免疫魔免最低伤害:%d\n",x);
        printf("损失值:%d\n",m-x);
        printf("流血状态下伤害(魔免):%d\n",o);
        printf("衰弱状态下伤害(魔免):%d\n",p);
        printf("双状态下伤害(魔免):%d\n",q);
        printf("全减免疫伤害:%d\n",r);
        printf("全减魔攻有效伤害(强命)%.2f\n",y2);
        printf("损失值:%.2f\n",r-y2);
        printf("全减魔攻有效最低伤害:%d\n",x1);
        printf("损失值:%d\n",r-x1);
        printf("流血状态下伤害:%d\n",s);
        printf("衰弱状态下伤害:%d\n",t);
        printf("双状态下伤害:%d\n",u);
        printf("双状态伤害(强命):%.2f\n",y3);
        printf("损失值:%.2f\n",u-y3);
        printf("双状态最低伤害:%d\n",x2);
        printf("损失值:%d\n",u-x2);
    }
    fflush(stdin);
    printf("\n"); 
    printf("按回车键退出......\n"); 
    getchar();
    return 0; 
}

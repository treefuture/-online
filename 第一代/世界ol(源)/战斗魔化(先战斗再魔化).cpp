#include<stdio.h>
int main()
{
    int a,a1,a2,a3,a4,a5;
    int b=0,b1=0,b2=0,b3=0,b4=0,b5=0;
    int c=0,c1=0,c2=0,c3=0,c4=0,c5=0;
    int e=0,e1=0,e2=0,e3=0,e4=0,e5=0;
    int f=0,f1=0,f2=0,f3=0,f4=0,f5=0;
    int d=0,h=1000000,g;
    printf("请输入劈砍(穿刺)值:");
    scanf("%d",&a);
    a1=a2=a3=a4=a5=a;
    while(d<5) {
        if(a>=h) {
            break;
        }
        d++;
        g=f;//保留战斗叠加的值
        e=a-f;//保留a上一回合的值
        a=(a-f)*1.4;//叠加战斗
        f=a-e;//战斗叠加的值
        b=a;//保留a的返回值
        a=a*1.24;//叠加魔化
        c=a-b;//魔化叠加的值
        printf("【当前的回合%d】\n",d);
        printf("当前的劈砍(穿刺)值%d\n",a);
        printf("魔化叠加的值:%d\n",c);
        printf("战斗叠加得值%d\n",f);
        printf("顶的战斗值%d\n",g);
    }
    while(d<10) {
        if(a>=h) {
            break;
        }
        d++;
        e1=a1-f1;//保留a1上一回合的值
        a1=(a1-f1)*1.4;//叠加战斗
        f1=a1-e1;//叠加战斗的值
        b1=a1;//保留a的返回值
        a1=a1*1.24;//叠加魔化
        c1=a1-b1;//魔化叠加的值
        g=f;//保留战斗叠加的值
        a=a-c1;//魔化的值消失
        e=a-f;//保留a上一回合的值
        a=(a-f)*1.4;//叠加战斗
        f=a-e;//战斗叠加的值
        b=a;//保留a的返回值
        a=a*1.24;//叠加魔化
        c=a-b;//魔化叠加的值
        printf("【当前的回合%d】\n",d);
        printf("当前的劈砍(穿刺)值%d\n",a);
        printf("魔化叠加的值:%d\n",c);
        printf("战斗叠加得值%d\n",f);
        printf("顶的战斗值%d\n",g);
        printf("魔化顶的值为:%d\n",c1);
    }
    while(d<15) {
        if(a>=h) {
            break;
        }
        d++;
        e2=a2-f2;//保留a2上一回合的值
        a2=(a2-f2)*1.4;//叠加战斗
        f2=a2-e2;//战斗叠加的值
        b2=a2;//保留a2的返回值
        a2=a2*1.24;//叠加魔化
        c2=a2-b2;//魔化叠加的值
        a1=a1-c2;//魔化的值消失
        e1=a1-f1;//保留a1上一回合的值
        a1=(a1-f1)*1.4;//叠加战斗
        f1=a1-e1;//战斗叠加的值
        b1=a1;//保留a1的返回值
        a1=a1*1.24;//叠加魔化
        c1=a1-b1;//叠加的值
        g=f;//保留战斗叠加的值
        a=a-c1;//魔化的值消失
        e=a-f;//保留a上一回合的值
        a=(a-f)*1.4;//叠加战斗
        f=a-e;//战斗叠加的值
        b=a;//保留a的返回值
        a=a*1.24;//叠加魔化
        c=a-b;//魔化叠加的值
        printf("【当前的回合%d】\n",d);
        printf("当前的劈砍(穿刺)值%d\n",a);
        printf("魔化叠加的值:%d\n",c);
        printf("战斗叠加得值%d\n",f);
        printf("顶的战斗值%d\n",g);
        printf("魔化顶的值为:%d\n",c1);
    }
    while(d<20) {
        if(a>=h) {
            break;
        }
        d++;
        e3=a3-f3;//保留a3上一回合的值
        a3=(a3-f3)*1.4;//叠加战斗
        f3=a3-e3;//战斗叠加的值
        b3=a3;//保留a3的返回值
        a3=a3*1.24;//叠加魔化
        c3=a3-b3;//魔化叠加的值
        a2=a2-c3;//魔化的值消失
        e2=a2-f2;//保留a2上一回合的值
        a2=(a2-f2)*1.4;//叠加战斗
        f2=a2-e2;//战斗叠加的值
        b2=a2;//保留a2的返回值
        a2=a2*1.24;//叠加魔化
        c2=a2-b2;//魔化叠加的值
        a1=a1-c2;//魔化的值消失
        e1=a1-f1;//保留a1上一回合的值
        a1=(a1-f1)*1.4;//叠加战斗
        f1=a1-e1;//战斗叠加的值
        b1=a1;//保留a1的返回值
        a1=a1*1.24;//叠加魔化
        c1=a1-b1;//魔化叠加的值
        g=f;//保留战斗叠加的值
        a=a-c1;//魔化的值消失
        e=a-f;//保留a上一回合的值
        a=(a-f)*1.4;//叠加战斗
        f=a-e;//战斗叠加的值
        b=a;//保留a的返回值
        a=a*1.24;//叠加魔化
        c=a-b;//魔化叠加的值
        printf("【当前的回合%d】\n",d);
        printf("当前的劈砍(穿刺)值%d\n",a);
        printf("魔化叠加的值:%d\n",c);
        printf("战斗叠加得值%d\n",f);
        printf("顶的战斗值%d\n",g);
        printf("魔化顶的值为:%d\n",c1);
    }
    while(d<25) {
        if(a>=h) {
            break;
        }
        d++;
        e4=a4-f4;//保留a4上一回合的值
        a4=(a4-f4)*1.4;//叠加战斗
        f4=a4-e4;//战斗叠加的值
        b4=a4;//保留a4的返回值
        a4=a4*1.24;//叠加魔化
        c4=a4-b4;//魔化叠加的值
        a3=a3-c4;//魔化的值消失
        e3=a3-f3;//保留a3上一回合的值
        a3=(a3-f3)*1.4;//叠加战斗
        f3=a3-e3;//战斗叠加的值
        b3=a3;//保留a3的返回值
        a3=a3*1.24;//叠加魔化
        c3=a3-b3;//魔化叠加的值
        a2=a2-c3;//魔化的值消失
        e2=a2-f2;//保留a2上一回合叠加的值
        a2=(a2-f2)*1.4;//叠加战斗
        f2=a2-e2;//战斗叠加的值
        b2=a2;//保留a2的返回值
        a2=a2*1.24;//叠加魔化
        c2=a2-b2;//魔化叠加的值
        a1=a1-c2;//魔化的值消失
        e1=a1-f1;//保留a1上一回合的值
        a1=(a1-f1)*1.4;//叠加战斗
        f1=a1-e1;//战斗叠加的值
        b1=a1;//保留a1的返回值
        a1=a1*1.24;//叠加魔化
        c1=a1-b1;//魔化叠加的值
        a=a-c1;//魔化的值消失
        g=f;//保留战斗叠加的值
        e=a-f;//保留a上一回合的值
        a=(a-f)*1.4;//叠加战斗
        f=a-e;//战斗叠加的值
        b=a;//保留a的返回值
        a=a*1.24;//叠加魔化
        c=a-b;//魔化叠加的值
        printf("【当前的回合%d】\n",d);
        printf("当前的劈砍(穿刺)值%d\n",a);
        printf("魔化叠加的值:%d\n",c);
        printf("战斗叠加得值%d\n",f);
        printf("顶的战斗值%d\n",g);
        printf("魔化顶的值为:%d\n",c1);
    }
    while(d<30) {
        if(a>=h) {
            break;
        }
        d++;
        e5=a5-f5;//保留a5上一回合的值
        a5=(a5-f5)*1.4;//叠加战斗
        f5=a5-e5;//战斗叠加的值
        b5=a5;//保留a5的返回值
        a5=a5*1.24;//叠加魔化
        c5=a5-b5;//魔化叠加的值
        a4=a4-c5;//魔化的值消失
        e4=a4-f4;//保留a4上一回合的值
        a4=(a4-f4)*1.4;//叠加战斗
        f4=a4-e4;//战斗叠加的值
        b4=a4;//保留a4的返回值
        a4=a4*1.24;//叠加魔化
        c4=a4-b4;//魔化叠加的值
        a3=a3-c4;//魔化的值消失
        e3=a3-f3;//保留a3上一回合的值
        a3=(a3-f3)*1.4;//叠加战斗
        f3=a3-e3;//战斗叠加的值
        b3=a3;//保留a3的返回值
        a3=a3*1.24;//叠加魔化
        c3=a3-b3;//魔化叠加的值
        a2=a2-c3;//魔化的值消失
        e2=a2-f2;//保留a2上一回合的值
        a2=(a2-f2)*1.4;//叠加战斗
        f2=a2-e2;//战斗叠加的值
        b2=a2;//保留a2的返回值
        a2=a2*1.24;//叠加魔化
        c2=a2-b2;//魔化叠加的值
        a1=a1-c2;//魔化的值消失
        e1=a1-f1;//保留a1上一回合的值
        a1=(a1-f1)*1.4;//叠加魔化
        f1=a1-e1;//魔化叠加的值
        b1=a1;//保留a1的返回值
        a1=a1*1.24;//叠加魔化
        c1=a1-b1;//魔化叠加的值
        a=a-c1;//魔化的值消失
        g=f;//保留战斗叠加的值
        e=a-f;//保留a上一回合的值
        a=(a-f)*1.4;//叠加战斗
        f=a-e;//战斗叠加的值
        b=a;//保留a的返回值
        a=a*1.24;//叠加魔化
        c=a-b;//魔化叠加的值
        printf("【当前的回合%d】\n",d);
        printf("当前的劈砍(穿刺)值%d\n",a);
        printf("魔化叠加的值:%d\n",c);
        printf("战斗叠加得值%d\n",f);
        printf("顶的战斗值%d\n",g);
        printf("魔化顶的值为:%d\n",c1);
    }
    fflush(stdin);
    printf("\n"); 
    printf("按回车键退出......\n"); 
    getchar();
    return 0;
}
